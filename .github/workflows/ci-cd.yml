name: Saleor K8s Deployment CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
   
permissions:
    contents: read
    packages: write
    security-events: write #
env:
  REGISTRY: ghcr.io
  SALEOR_IMAGE: ghcr.io/${{ github.repository_owner }}/saleor-webapp
  DASHBOARD_IMAGE: ghcr.io/${{ github.repository_owner }}/saleor-dashboard
  KUBERNETES_NAMESPACE: ${{ vars.KUBERNETES_NAMESPACE }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Saleor API image
      uses: docker/build-push-action@v5
      with:
        context: ./saleor-webapp
        load: true
        tags: ${{ env.SALEOR_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.SALEOR_IMAGE }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Push Saleor API image
      uses: docker/build-push-action@v5
      with:
        context: ./saleor-webapp
        push: true
        tags: |
          ${{ env.SALEOR_IMAGE }}:latest
          ${{ env.SALEOR_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Create KinD cluster
      uses: helm/kind-action@v1
      with:
        cluster_name: saleor-test
        
    - name: Load images to KinD
      run: |
        kind load docker-image ${{ env.SALEOR_IMAGE }}:${{ github.sha }} --name saleor-test
        
    - name: Update image tags in manifests
      run: |
        sed -i "s|${{ env.SALEOR_IMAGE }}:latest|${{ env.SALEOR_IMAGE }}:${{ github.sha }}|g" k8s-manifests/07-saleor-deployment.yaml
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s-manifests/
        kubectl rollout status deployment/saleor -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
        kubectl rollout status deployment/saleor-dashboard -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
        
    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}
        kubectl get services -n ${{ env.KUBERNETES_NAMESPACE }}
        kubectl get ingress -n ${{ env.KUBERNETES_NAMESPACE }}
        
    - name: Wait for pods to be ready
      run: |
        kubectl wait --for=condition=ready pod -l app=saleor -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
        kubectl wait --for=condition=ready pod -l app=postgres -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=120s
        kubectl wait --for=condition=ready pod -l app=redis -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=60s
        
    - name: Test Saleor API health
      run: |
        kubectl port-forward -n ${{ env.KUBERNETES_NAMESPACE }} svc/saleor 8000:8000 &
        sleep 10
        curl -f http://localhost:8000/health/ || exit 1
        echo "✅ Saleor API health check passed"
        
    - name: Test GraphQL endpoint
      run: |
        response=$(curl -s -X POST http://localhost:8000/graphql/ \
          -H "Content-Type: application/json" \
          -d '{"query": "{ shop { name } }"}')
        echo "GraphQL Response: $response"
        if echo "$response" | grep -q "data"; then
          echo "✅ GraphQL endpoint working"
        else
          echo "❌ GraphQL endpoint failed"
          exit 1
        fi
        
    - name: Test Dashboard accessibility
      run: |
        kubectl port-forward -n ${{ env.KUBERNETES_NAMESPACE }} svc/saleor-dashboard 3000:3000 &
        sleep 10
        curl -f http://localhost:3000/ || exit 1
        echo "✅ Dashboard accessible"